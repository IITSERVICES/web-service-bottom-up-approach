 STEP 1: Create a Maven Project
Create a folder named:

Copy
Edit
java-soap-service
Inside that folder, create the Maven project structure:

css
Copy
Edit
java-soap-service
│
├── pom.xml
└── src
    └── main
        └── java
            └── com
                └── example
                    ├── HelloService.java
                    ├── HelloServiceImpl.java
                    └── Main.java
📝 STEP 2: pom.xml
Create pom.xml in the root folder (java-soap-service):

xml
Copy
Edit
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>java-soap-service</artifactId>
  <version>1.0-SNAPSHOT</version>

  <properties>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <cxf.version>4.0.2</cxf.version>
  </properties>

  <dependencies>
    <!-- Apache CXF Frontend -->
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-rt-frontend-jaxws</artifactId>
      <version>${cxf.version}</version>
    </dependency>

    <!-- Apache CXF HTTP Transport -->
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-rt-transports-http</artifactId>
      <version>${cxf.version}</version>
    </dependency>

    <!-- JAXB for JDK 17 -->
    <dependency>
      <groupId>jakarta.xml.bind</groupId>
      <artifactId>jakarta.xml.bind-api</artifactId>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jaxb</groupId>
      <artifactId>jaxb-runtime</artifactId>
      <version>4.0.2</version>
    </dependency>

    <!-- JAX-WS and JWS APIs -->
    <dependency>
      <groupId>jakarta.jws</groupId>
      <artifactId>jakarta.jws-api</artifactId>
      <version>3.0.0</version>
    </dependency>
    <dependency>
      <groupId>jakarta.xml.ws</groupId>
      <artifactId>jakarta.xml.ws-api</artifactId>
      <version>4.0.0</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Plugin to run Java main method -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.1.0</version>
        <configuration>
          <mainClass>com.example.Main</mainClass>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
✅ After saving pom.xml, run this to download dependencies:

bash
Copy
Edit
mvn clean install
Let me know once done, then we’ll go to the next step: Java Interface and Implementation.







You said:
ok


ChatGPT said:
Awesome! Now let’s move on to the Java files. You’ll create three simple Java classes.

🟩 STEP 3: Create the Java Interface – HelloService.java
📄 Path: src/main/java/com/example/HelloService.java

java
Copy
Edit
package com.example;

import jakarta.jws.WebMethod;
import jakarta.jws.WebService;

@WebService
public interface HelloService {

    @WebMethod
    String sayHello(String name);
}
✅ This is the interface that defines our SOAP operation.

🟦 STEP 4: Create the Implementation – HelloServiceImpl.java
📄 Path: src/main/java/com/example/HelloServiceImpl.java

java
Copy
Edit
package com.example;

import jakarta.jws.WebService;

@WebService(endpointInterface = "com.example.HelloService")
public class HelloServiceImpl implements HelloService {

    @Override
    public String sayHello(String name) {
        return "Hello, " + name + "! This is a SOAP response from Java.";
    }
}
✅ This is the actual class that implements the SOAP method.

🟨 STEP 5: Create the Publisher – Main.java
📄 Path: src/main/java/com/example/Main.java

java
Copy
Edit
package com.example;

import jakarta.xml.ws.Endpoint;

public class Main {

    public static void main(String[] args) {
        String url = "http://localhost:8080/hello";
        Endpoint.publish(url, new HelloServiceImpl());
        System.out.println("SOAP Service published at: " + url + "?wsdl");
    }
}
✅ This is your main class to run and expose the SOAP service.

✅ STEP 6: Run the SOAP Service
Use this command:

bash
Copy
Edit
mvn exec:java
📄 If everything is correct, you should see:

bash
Copy
Edit
SOAP Service published at: http://localhost:8080/hello?wsdl
🧪 Open this in your browser:

bash
Copy
Edit
http://localhost:8080/hello?wsdl